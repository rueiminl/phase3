package mypackage;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.math.*;
import java.util.*;
import java.sql.*;
import org.apache.tomcat.jdbc.pool.DataSource;
import org.apache.tomcat.jdbc.pool.PoolProperties;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.hbase.KeyValue;
// Extend HttpServlet class
public class q5 extends HttpServlet {
    Configuration config;
    HTable table;
    HashMap<String, Integer[]> data;
    public void init() throws ServletException 
    {
        try
        {
		data = new HashMap<String, Integer[]>();
		BufferedReader r = new BufferedReader(new FileReader(getServletContext().getRealPath("q5.txt")));
		String line;
		while ((line = r.readLine()) != null) {
			String[] nums = line.split("\t");
			data.put(nums[0], new Integer[]{Integer.parseInt(nums[1]),Integer.parseInt(nums[2]),Integer.parseInt(nums[3])});
		}
        }
        catch (Exception e)
        {
        }
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Set response content type
        response.setContentType("text/plain");
        // Actual logic goes here.
        PrintWriter out = response.getWriter();
        out.println("Wolken,5534-0848-5100,0299-6830-9164");
	try 
	{
		String m = request.getParameter("m");
		String n = request.getParameter("n");
		
		StringBuilder result = new StringBuilder(256);//10+1+10+1+6+1 + 4+1+4+1+10+1 + 6+1+6+1+10+1 + 7+1+7+1+10+1 + 7+1+7+1+10+1
		result.append(m);
		result.append("\t");
		result.append(n);
		result.append("\tWINNER\n");
		Integer[] scoreM = data.get(Long.parseLong(m));
		Integer[] scoreN = data.get(Long.parseLong(n));
		for (int i = 0; i < 4; i++)
		{
			result.append(scoreM[i]);
			result.append("\t");
			result.append(scoreN[i]);
			if (scoreM[i] > scoreN[i])
				result.append(m);
			else if (scoreM[i] < scoreN[i])
				result.append(n);
			else
				result.append("X");
			result.append("\n");
		}
		out.println(result);
	}
	catch (Exception e)
	{
		out.println(e);
	}
    }

    public void destroy() {
        // do nothing.
    }
}
